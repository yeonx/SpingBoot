buildscript {
    ext{ //ert : build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
        springBootVersion='2.1.7.RELEASE' //springBootVersion 전역변수를 생성하고 그 값을 '2.1.7.RELEASE'로 하겠다
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //spring-boot-gradle-plugin라는 스프링 부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받겠다는 의미
    }
}
//4가지는 자바와 스프링 부트를 사용하기 위해 꼭 추가해야함
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' //스프링 부트의 의존성들을 관리해 주는 플러그인이라 꼭 추가해야함


//plugins {
//    id 'java'
//}

//group 'org.example'
group 'com.jojoldu.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories { //각종 의존성들을 어떤 원격 저장소에 받을지를 정함
    mavenCentral() //기본적으로 이걸 많이 사용하지만
}

dependencies { //개발에 필요한 의존성들을 선언하는 곳
    //compile('org.springframework.boot:spring-boot-starter-web')
    //testCompile('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-web') // 내 버전은 compile대신 implementation
    testImplementation('org.springframework.boot:spring-boot-starter-test') // testCompile대신 testImplementation사용
    
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    /*
    spring-boot-starter-data-jpa
    -> 스프링 부트용 Spring Data JPA 추상화 라이브러리
    -> 스프링 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리
    */
    implementation('com.h2database:k2')
    /*
    h2
    -> 인메모리 관계형 데이터 베이스
    -> 별도의 설치 없이 프로젝트 의존성만으로 관리할 수 있음.
    -> 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용
    */
    
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

test {
    useJUnitPlatform()
}

